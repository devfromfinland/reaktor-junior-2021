/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

// import { CacheableResponsePlugin } from 'workbox-cacheable-response'
import { clientsClaim } from 'workbox-core'
import { ExpirationPlugin } from 'workbox-expiration'
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching'
import { registerRoute } from 'workbox-routing'
import { NetworkFirst, StaleWhileRevalidate } from 'workbox-strategies'

clientsClaim()

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST)

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$')
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false
    } // Return true to signal that we want to use the handler.

    return true
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
)

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
)

// cache product lists, cache expires in 1 hour
// todo: add push notification if possible when there is a new product added to refresh the cache
registerRoute(
  ({ url }) => url.pathname.startsWith('/products/'),
  new StaleWhileRevalidate({
    cacheName: 'product-request',
    // plugins: [
    //   new ExpirationPlugin({
    //     maxAgeSeconds: 60 * 60
    //   })
    // ]
  })
)

// cache product availability, cache expires every 5 minutes (in sync with server)
// todo: should not save cache if response code is 204 or the content is empty
registerRoute(
  ({ url }) => url.pathname.startsWith('/availability/'),
  new NetworkFirst({
    cacheName: 'availability-request',
    // plugins: [
    //   new ExpirationPlugin({
    //     maxAgeSeconds: 60 * 5
    //   })
    // ]
  })
)

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting()
  }
})

// Attempt to filter bad response (code 204 or no body)
// self.addEventListener('fetch', e => {
//   const { request } = e;
//   const url = new URL(request.url);

//   console.log('url origin', url.origin)
//   console.log('location origin', location.origin)
//   console.log('url pathname', url.pathname)

//   if (url.pathname.startsWith('/availability')) {
//     // 'network first' cache strategy
//     e.respondWith(
//       fetch(e.request)
//         .then(res => {
//           // work around response code 204
//           // if response is 204 (has no body), then serve cached data
//           // if there is data, update cache
//           console.log(e.request, 'has res.bodyUsed', res)

//           if (res.bodyUsed) {
//             // Make copy/clone of response
//             const resClone = res.clone()

//             // Open cache
//             caches
//               .open('availability-request')
//               .then(cache => cache.put(e.request, resClone))

//             return res
//           } else {
//             // todo: handle issue when there is no initial cached data
//             // caches.match(e.request)
//             //   .then(res => {
//             //     console.log('is there cached response', res)
//             //     return res
//             //   })
//             throw new Error('bad response')
//           }
//         })
//         .catch(err => caches.match(e.request).then(res => res))
//     )
//   }
// })